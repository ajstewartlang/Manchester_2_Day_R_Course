labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
no_pooling <- as.tibble(lmList(rt ~ caffeine | subject, data_all) %>%
coef() %>%
# Subject IDs are stored as row-names. Make them an explicit column
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "No pooling"))
no_pooling$subject <- as.integer(no_pooling$subject)
model_pooled <- lm(rt ~ caffeine, data_all)
# Repeat the intercept and slope terms for each participant
pooled <- data_frame(
Model = "Complete pooling",
subject = as.integer(unique(data_all$subject)),
Intercept = coef(model_pooled)[1],
Slope = coef(model_pooled)[2])
# Join the raw data so we can use plot the points and the lines.
models <- bind_rows(pooled, no_pooling) %>%
left_join(data_all, by = "subject")
models$subject <- as.factor(models$subject)
p_model_comparison <- ggplot(models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
m <- lmer(rt ~ 1 + caffeine + (1 + caffeine | subject), data_all)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
p_model_comparison
%+%
?stringi
library(stringi)
# Replace the data-set of the last plot
p_model_comparison %+% df_models
p_model_comparison <- ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
df_models
df_models$Model
View(df_models)
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
data
data_all
subject <- rep(1:10, each = 5)
caffeine <- rep(rep(1:5), 10)
data <- arrange(as.tibble(cbind(subject, caffeine)), caffeine)
rt <- c(rnorm(10, 1300, 45),
rnorm(10, 1200, 65),
rnorm(10, 1100, 75),
rnorm(10, 1000, 55),
rnorm(10, 1000, 80))
data_all <- arrange(cbind(data, rt), subject)
data_all[subject == 10 & caffeine != 1,]$rt <- NA
ggplot(data_all, aes (x = caffeine, y = rt)) +
geom_point() +
geom_smooth(data = data_all, method = "lm", se = FALSE, colour = "#00BFC4", size = .75, linetype = 1) +
facet_wrap(subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
model_pooled <- lm(rt ~ caffeine, data_all)
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
p_model_comparison <- ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
caffeine <- rep(rep(1:5), 10)
subject <- rep(1:10, each = 5)
caffeine <- rep(rep(1:5), 10)
data <- arrange(as.tibble(cbind(subject, caffeine)), caffeine)
rt <- c(rnorm(10, 1400, 45),
rnorm(10, 1100, 65),
rnorm(10, 1200, 75),
rnorm(10, 1050, 55),
rnorm(10, 1000, 80))
data_all <- arrange(cbind(data, rt), subject)
data_all[subject == 10 & caffeine != 1,]$rt <- NA
ggplot(data_all, aes (x = caffeine, y = rt)) +
geom_point() +
geom_smooth(data = data_all, method = "lm", se = FALSE, colour = "#00BFC4", size = .75, linetype = 1) +
facet_wrap(subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
no_pooling <- as.tibble(lmList(rt ~ caffeine | subject, data_all) %>%
coef() %>%
# Subject IDs are stored as row-names. Make them an explicit column
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "No pooling"))
no_pooling$subject <- as.integer(no_pooling$subject)
model_pooled <- lm(rt ~ caffeine, data_all)
# Repeat the intercept and slope terms for each participant
pooled <- data_frame(
Model = "Complete pooling",
subject = as.integer(unique(data_all$subject)),
Intercept = coef(model_pooled)[1],
Slope = coef(model_pooled)[2])
# Join the raw data so we can use plot the points and the lines.
models <- bind_rows(pooled, no_pooling) %>%
left_join(data_all, by = "subject")
models$subject <- as.factor(models$subject)
p_model_comparison <- ggplot(models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
p_model_comparison <- ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
library(tidyverse) # All hail the tidyverse
library(Hmisc) # Needed for correlation
library(broom) # Needed to convert stats objects into tibbles
library(car) # Needed for VIF calculations and DW test
library(psych) # Generating descriptives
library(afex) # Needed to run ANOVA model using Type III SS, contrast coding
library(emmeans) # Needed for adjusted means and pairwise comparisons
library(lme4)
subject <- rep(1:10, each = 5)
caffeine <- rep(rep(1:5), 10)
data <- arrange(as.tibble(cbind(subject, caffeine)), caffeine)
rt <- c(rnorm(10, 1400, 45),
rnorm(10, 1100, 65),
rnorm(10, 1200, 75),
rnorm(10, 1050, 55),
rnorm(10, 1000, 80))
data_all <- arrange(cbind(data, rt), subject)
data_all[subject == 10 & caffeine != 1,]$rt <- NA
ggplot(data_all, aes (x = caffeine, y = rt)) +
geom_point() +
geom_smooth(data = data_all, method = "lm", se = FALSE, colour = "#00BFC4", size = .75, linetype = 1) +
facet_wrap(subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
no_pooling <- as.tibble(lmList(rt ~ caffeine | subject, data_all) %>%
coef() %>%
# Subject IDs are stored as row-names. Make them an explicit column
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "No pooling"))
no_pooling$subject <- as.integer(no_pooling$subject)
model_pooled <- lm(rt ~ caffeine, data_all)
# Repeat the intercept and slope terms for each participant
pooled <- data_frame(
Model = "Complete pooling",
subject = as.integer(unique(data_all$subject)),
Intercept = coef(model_pooled)[1],
Slope = coef(model_pooled)[2])
# Join the raw data so we can use plot the points and the lines.
models <- bind_rows(pooled, no_pooling) %>%
left_join(data_all, by = "subject")
models$subject <- as.factor(models$subject)
p_model_comparison <- ggplot(models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
m
summary(m)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
df_models
p_model_comparison <- ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
View(df_models)
subject <- rep(1:10, each = 5)
caffeine <- rep(rep(1:5), 10)
data <- arrange(as.tibble(cbind(subject, caffeine)), caffeine)
rt <- c(rnorm(10, 1300, 50),
rnorm(10, 1200, 55),
rnorm(10, 1100, 55),
rnorm(10, 1000, 60),
rnorm(10, 1000, 80))
data_all <- arrange(cbind(data, rt), subject)
data_all[subject == 10 & caffeine != 1,]$rt <- NA
ggplot(data_all, aes (x = caffeine, y = rt)) +
geom_point() +
geom_smooth(data = data_all, method = "lm", se = FALSE, colour = "#00BFC4", size = .75, linetype = 1) +
facet_wrap(subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
no_pooling <- as.tibble(lmList(rt ~ caffeine | subject, data_all) %>%
coef() %>%
# Subject IDs are stored as row-names. Make them an explicit column
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "No pooling"))
no_pooling$subject <- as.integer(no_pooling$subject)
model_pooled <- lm(rt ~ caffeine, data_all)
# Repeat the intercept and slope terms for each participant
pooled <- data_frame(
Model = "Complete pooling",
subject = as.integer(unique(data_all$subject)),
Intercept = coef(model_pooled)[1],
Slope = coef(model_pooled)[2])
# Join the raw data so we can use plot the points and the lines.
models <- bind_rows(pooled, no_pooling) %>%
left_join(data_all, by = "subject")
models$subject <- as.factor(models$subject)
p_model_comparison <- ggplot(models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
subject <- rep(1:10, each = 5)
caffeine <- rep(rep(1:5), 10)
data <- arrange(as.tibble(cbind(subject, caffeine)), caffeine)
set.seed(1234)
rt <- c(rnorm(10, 1300, 50),
rnorm(10, 1200, 55),
rnorm(10, 1100, 55),
rnorm(10, 1000, 60),
rnorm(10, 1000, 80))
data_all <- arrange(cbind(data, rt), subject)
data_all[subject == 10 & caffeine != 1,]$rt <- NA
ggplot(data_all, aes (x = caffeine, y = rt)) +
geom_point() +
geom_smooth(data = data_all, method = "lm", se = FALSE, colour = "#00BFC4", size = .75, linetype = 1) +
facet_wrap(subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
no_pooling <- as.tibble(lmList(rt ~ caffeine | subject, data_all) %>%
coef() %>%
# Subject IDs are stored as row-names. Make them an explicit column
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "No pooling"))
no_pooling$subject <- as.integer(no_pooling$subject)
model_pooled <- lm(rt ~ caffeine, data_all)
# Repeat the intercept and slope terms for each participant
pooled <- data_frame(
Model = "Complete pooling",
subject = as.integer(unique(data_all$subject)),
Intercept = coef(model_pooled)[1],
Slope = coef(model_pooled)[2])
# Join the raw data so we can use plot the points and the lines.
models <- bind_rows(pooled, no_pooling) %>%
left_join(data_all, by = "subject")
models$subject <- as.factor(models$subject)
p_model_comparison <- ggplot(models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
p_model_comparison
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
p_model_comparison %+% df_models
ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
# Linear mixed model (LMM) for 1-factor (repeated measures) with three levels ####
DV <- read_csv("DV_1factor.csv",
col_types = cols(Condition = col_factor(levels = c("Neutral",
"Positive", "Negative"))))
DV$Condition <- relevel(DV$Condition, ref=3)
ggplot(DV, aes(x=Condition, y=Gaze, colour=Condition)) + geom_boxplot() + guides(colour=FALSE)
ggplot(DV, aes(x=Condition, y=Gaze, colour=Condition)) + geom_violin() + geom_jitter(width=.1, alpha=.5) +
stat_summary(fun.data="mean_cl_boot", colour="black") + guides(colour=FALSE)
ggplot(DV, aes(x = Condition, y = Gaze, colour = Condition)) +
geom_violin() +
geom_jitter(width = .1, alpha = .5) +
stat_summary(fun.data = "mean_cl_boot", colour = "black") +
guides(colour = FALSE)
model.null <- lmer(Gaze ~ (1+Condition|Subject) + (1+Condition|Item), data=DV, REML=TRUE)
model.full <- lmer(Gaze ~ Condition + (1+Condition|Subject) + (1+Condition|Item), data=DV, REML=TRUE)
anova(model.null, model.full)
anova(model.null, model.full)
summary(model.full)
# GLMM for binomial data - 1-factor with(repeated measures) with 3 levels
RO <- read_csv("RO.csv", col_types = cols(Condition = col_factor(levels = c("Neutral",
"Positive", "Negative"))))
data_agg <- RO %>% group_by(Condition) %>% summarise(mean=mean(DV), sd=sd(DV))
data_agg <- RO %>%
group_by(Condition) %>%
summarise(mean = mean(DV), sd = sd(DV))
ggplot(data_agg, aes(x=Condition, y=mean, fill=Condition)) + geom_col() +
guides(fill=FALSE)
model.full <- glmer(DV ~ Condition + (1+Condition|Subject) + (1+Condition|Item), data=RO, family=binomial)
model.interceptonly <- glmer(DV ~ Condition + (1|Subject) + (1|Item) , data=RO, family=binomial)
model.null <- glmer(DV ~  (1 | Subject) + (1 | Item), data = RO, family = binomial)
anova(model.interceptonly, model.null)
# LMM for 2x2 repeated measures factorial design
DV <- read_csv("DV.csv")
DV$Sentence <- as.factor(DV$Sentence)
DV$Context <- as.factor(DV$Context)
# Set up contrast coding
contrasts(DV$Sentence) <- matrix(c(.5, -.5))
contrasts(DV$Context) <- matrix(c(.5, -.5))
# Visualise
ggplot(DV, aes(x=Context:Sentence, y=RT, colour=Context:Sentence)) + geom_violin() +
geom_jitter(width=.1, alpha=.1) + stat_summary(fun.data="mean_cl_boot", colour="black") +
guides(colour=FALSE)
data_agg <- DV %>%
group_by(Context, Sentence) %>%
summarise_at("RT", funs(mean, sd), na.rm = TRUE)
data_agg$SE <- data_agg$sd/sqrt(60)
ggplot(data_agg, aes(x=Context, y=mean, fill=Context, group=Sentence, colour=Sentence)) +
geom_line() + geom_point() + ylim(1200,1800) + labs(y="Mean RT (ms.)") +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE, width=.1)) + guides(fill=FALSE)
ggplot(data_agg, aes(x = Context, y = mean, fill = Context, group = Sentence,
colour = Sentence)) +
geom_line() +
geom_point() +
ylim(1200, 1800) +
labs(y = "Mean RT (ms.)") +
geom_errorbar(aes(ymin = mean - SE, ymax = mean + SE, width = .1)) +
guides(fill = FALSE)
model.full <- lmer(RT~Context*Sentence + (1+Context*Sentence|Subject) +
(1+Context*Sentence|Item), data=DV, REML=TRUE)
model.null <- lmer(RT ~ (1 + Context * Sentence | Subject) + (1 + Context * Sentence|Item),
data = DV, REML = TRUE)
summary(model.full)
model.full <- lmer(RT ~ Context * Sentence + (1 + Context + Sentence | Subject) +
(1 + Context + Sentence | Item), data = DV, REML = TRUE)
summary(model.full)
model.full <- lmer(RT ~ Context * Sentence + (1 + Context * Sentence | Subject) +
(1 + Context * Sentence | Item), data = DV, REML = TRUE)
summary(model.full)
emmeans(model.full, pairwise ~ Context * Sentence, adjust = "none")
anova(model.full, model.null)
# Build and examine normality of residuals with data untransformed ####
model.full <- lmer(RT~Context*Sentence + (1+Context*Sentence|Subject) +
(1+Context*Sentence|Item), data=DV, REML=TRUE)
qqnorm(residuals(model.full))
# Build and examine normality of residuals with data log transformed
model.full <- lmer(log(RT)~Context*Sentence + (1+Context*Sentence|Subject) +
(1+Context*Sentence|Item), data=DV, REML=TRUE)
qqnorm(residuals(model.full))
summary(model.full)
# Build and examine normality of residuals with GLMM under the Gamma distribution -
# simplified random effects structure needed to converge
model.full <- glmer(RT~Context*Sentence + (1+Context|Subject) + (1+Context|Item), data=DV, family=Gamma)
summary(model.full)
# Build and examine normality of residuals with GLMM under the Gamma distribution -
# simplified random effects structure needed to converge
model.full <- glmer(RT ~ Context * Sentence + (1 + Context * Sentence | Subject) +
(1 + Context * Sentence | Item), data = DV, family = Gamma)
summary(model.full)
# Build and examine normality of residuals with GLMM under the Gamma distribution -
# simplified random effects structure needed to converge
model.full <- glmer(RT ~ Context * Sentence + (1 | Subject) +
(1 | Item), data = DV, family = Gamma)
subject <- rep(1:10, each = 5)
caffeine <- rep(rep(1:5), 10)
data <- arrange(as.tibble(cbind(subject, caffeine)), caffeine)
set.seed(1234)
rt <- c(rnorm(10, 1300, 50),
rnorm(10, 1200, 55),
rnorm(10, 1100, 55),
rnorm(10, 1000, 60),
rnorm(10, 1000, 80))
data_all <- arrange(cbind(data, rt), subject)
data_all[subject == 10 & caffeine != 1,]$rt <- NA
data_all
str(data_all)
m <- lmer(rt ~ caffeine + (1  | subject), data_all)
m
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
m <- lmer(rt ~ caffeine + (1 + caffeine | subject), data_all)
partial_pooling <- coef(m)[["subject"]] %>%
as_tibble() %>%
rownames_to_column("subject") %>%
rename(Intercept = `(Intercept)`, Slope = caffeine) %>%
add_column(Model = "Partial pooling")
partial_pooling$subject <- as.integer(partial_pooling$subject)
df_models <- bind_rows(pooled, no_pooling, partial_pooling) %>%
left_join(data_all, by = "subject")
# Replace the data-set of the last plot
ggplot(df_models) +
aes(x = caffeine, y = rt) +
geom_abline(aes(intercept = Intercept, slope = Slope, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ subject, nrow = 2) +
labs(x = "Caffeine", y = "RT") +
theme(legend.position = "top")
