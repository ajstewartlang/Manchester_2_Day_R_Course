data %>%
ggplot(aes(x = Prime:Target, y = Time)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
data %>%
ggplot(aes(x = Prime:Target, y = Time, colour = Prime)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
data %>%
ggplot(aes(x = Prime:Target, y = Time, colour = Prime:Target)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
data %>% filter(is.na(Time))
data %>% filter(is.na(Time)) %>% count()
data %>% filter(is.na(Time))
model1 <- lmer(Time ~ Prime * Target + (1 + Prime * Target|Subject) + (1 + Prime * Target| Item), data=w3data3, REML=TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Prime * Target|Subject) + (1 + Prime * Target| Item), data=data, REML=TRUE)
data %>% group_by(Subject) %>% summarise(n(Time))
data %>% group_by(Subject) %>% summarise(n())
data %>% group_by(Subject, Prime, Target) %>% summarise(n())
data %>% group_by(Subject, Prime, Target) %>% summarise(n() = RT)
data %>% group_by(Subject, Prime, Target) %>% summarise_at(is.na(), Time)
data %>% group_by(Subject, Prime, Target) %>% summarise_at(funs(is.na()), Time)
?summarise_at
data %>% group_by(Subject, Prime, Target) %>% summarise_at(vars(is.na()), Time)
data %>% group_by(Subject, Prime, Target) %>% summarise_at(vars(Time), is.na)
data %>% group_by(Subject) %>% summarise_at(vars(Time), is.na)
data %>% group_by(Subject) %>% summarise_at(vars(Time), is.na())
data %>% group_by(Subject) %>% summarise(non_na_count = sum(!is.na(Time))
data %>% group_by(Subject) %>% summarise(non_na_count = sum(!is.na(Time))
data %>% group_by(Subject) %>% summarise(non_na_count = sum(!is.na(Time))
data %>% group_by(Subject) %>% summarise(non_na_count = sum(!is.na(Time)))
data %>% group_by(Subject) %>% summarise(count = sum(is.na(Time)))
data %>% group_by(Subject) %>% summarise(missing_count = sum(is.na(Time)))
data %>%
group_by(Subject) %>%
summarise(missing_count = sum(is.na(Time))) %>%
ggplot(aes(x = Subject, y = missing_count)) %>%
geom_point()
data %>%
group_by(Subject) %>%
summarise(missing_count = sum(is.na(Time))) %>%
ggplot(aes(x = Subject, y = missing_count)) +
geom_point()
data %>%
group_by(Subject) %>%
summarise(missing_count = sum(is.na(Time))) %>%
ggplot(aes(x = Subject, y = missing_count)) +
geom_col()
summary(model1)
model1 <- lmer(Time ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime + Target | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Prime + Target | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Prime | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Prime | Subject) + (1 | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 | Subject) + (1 | Item), data = data, REML = TRUE)
summary(model1)
model1 <- lmer(Time ~ Prime * Target + (1 | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 | Subject) + (1 + Target | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Target | Subject) + (1 | Item), data = data, REML = TRUE)
summary(model1)
model1 <- lmer(Time ~ Prime * Target + (1 + Target | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model1 <- lmer(Time ~ Prime * Target + (1 + Target | Subject) + (1 + Target | Item), data = data, REML = TRUE)
emmeans (model1, pairwise ~ Prime*Target, adjust = "none")
qqnorm(residuals(model1))
model3 <- glmer (Time ~ Prime * Target + (1 + Prime * Target|Subject) + (1 + Prime * Target| Item), data=data, family=Gamma(link="log"))
summary (model3)
model6 <- glmer (Time ~ Prime * Target + (1 + Prime | Subject) + (1 + Prime | Item), data = data, family = Gamma)
summary (model6)
model6 <- glmer (Time ~ Prime * Target + (1 + Prime | Subject) + (1 | Item), data = data, family = Gamma)
summary (model6)
model6 <- glmer (Time ~ Prime * Target + (1 | Subject) + (1 | Item), data = data, family = Gamma)
summary (model6)
model6 <- glmer (Time ~ Prime * Target + (1 | Subject) , data = data, family = Gamma)
summary (model6)
model6 <- glmer (Time ~ Prime * Target + (1 | Item) , data = data, family = Gamma)
summary (model6)
emmeans (model6, pairwise~Prime*Target, adjust="none")
qqnorm (residuals(model6))
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime * Target|Subject) + (1 + Prime * Target| Item), data = data, REML = TRUE)
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime + Target | Item), data = data, REML = TRUE)
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime + Target | Subject) + (1 + Prime + Target | Item), data = data, REML = TRUE)
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime + Target | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime | Subject) + (1 + Prime | Item), data = data, REML = TRUE)
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime | Subject) + (1 | Item), data = data, REML = TRUE)
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Target | Subject) + (1 | Item), data = data, REML = TRUE)
summary(model7)
qqnorm (residuals(model7))
emmeans (model7, pairwise ~ Prime*Target, adjust = "none")
data %>% group_by(Prime, Target) %>% summarise(count = n())
model1 <- lmer(Time ~ Prime * Target + (1 + Target | Subject) + (1 | Item), data = data, REML = TRUE)
data <- read_csv("data2.csv")
data$Subject <- as.factor(data$Subject)
data$Item <- as.factor(data$Item)
data$Prime <- as.factor(data$Prime)
data$Target <- as.factor(data$Target)
contrasts(data$Prime) <- matrix(c(.5, -.5))
contrasts(data$Target) <- matrix(c(.5, -.5))
data %>%
filter(!is.na(Time)) %>%
group_by(Prime, Target) %>%
summarise(mean = mean(Time), sd = sd(Time))
model1 <- lmer(Time ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime * Target | Item), data = data, REML = TRUE)
summary(model1)
emmeans (model1, pairwise ~ Prime*Target, adjust = "none")
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime * Target | Item), data = data, REML = TRUE)
summary(model7)
qqnorm(residuals(model7))
emmeans (model7, pairwise ~ Prime*Target, adjust = "none")
library(beepr)
ggplot(crime, aes(x = Population, y = Violent_Crimes)) +
geom_point() +
geom_smooth(method = "lm")
library(tidyverse)
library(Hmisc)
library(lme4)
library(lmerTest)
library(emmeans)
crime <- read_csv("crime_dataset.csv")
head(crime)
crime <- separate(crime, 'City, State', into = c("City", "State"))
head(crime)
colnames(crime)[2] <- "House_price"
colnames(crime)[6] <- "Violent_Crimes"
head(crime)
ggplot(crime, aes(x = Population, y = Violent_Crimes)) +
geom_point() +
geom_smooth(method = "lm")
crime_filtered <- filter(crime, Population < 2000000)
ggplot(crime_filtered, aes(x = Population, y = Violent_Crimes)) +
geom_point() +
geom_smooth(method = "lm")
crime_filtered
ggplot(crime_filtered, aes(x = Population, y = Violent_Crimes, colour = State)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(crime_filtered, aes(x = Population, y = Violent_Crimes, colour = State)) +
geom_point()
ggplot(crime_filtered, aes(x = Population, y = Violent_Crimes)) +
geom_point() +
geom_smooth(method = "lm")
data %>%
ggplot(aes(x = Prime:Target, y = Time, colour = Prime:Target)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
data %>%
ggplot(aes(x = Prime:Target, y = Time, colour = Prime:Target)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
data %>%
ggplot(aes(x = Prime:Target, y = Time, colour = Prime:Target)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
warnings()
ranef(model6)
ranef(model7)
VarCorr
VarCorr(model7)
install.packages("brms")
library(brms)
model8 <- brm(Time ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime * Target | Item), data = data)
summary(model7)
summary(model8)
pp_check(model8)
marginal_effects(model8)
hypothesis(model8)
plot(model8)
?rnorm
?runif
b <- runif(20, 0, 1)
b
a <-
b <- data.frame(runif(20, 0, 1))
b
?data.frame
a <-
b <- runif(20, 0, 1)
c <- as.tibble(b)
c
d <- filter(c, value <.055)
d
d <- count(filter(c, value <.055))
d
data <- cbind(a, d)
data
a <- 1
data <- cbind(a, d)
data
for (i in 1:10000) {
a <- 1
b <- runif(20, 0, 1)
c <- as.tibble(b)
d <- count(filter(c, value <.055))
data <- cbind(a, d)
data_all <- rbind(data, data_all)
}
data_all <- NULL
for (i in 1:10000) {
a <- 1
b <- runif(20, 0, 1)
c <- as.tibble(b)
d <- count(filter(c, value <.055))
data <- cbind(a, d)
data_all <- rbind(data, data_all)
}
data_all
c <- data$a > data$n
c
?apply
data[data$a < data$n,]
?ifelse
ifelse(data$a > data$n, 1, 0))
c <- ifelse(data$a > data$n, 1, 0)
c
c <- ifelse(data_all$a > data_all$n, 1, 0)
c
sum(c)
d <- ifelse(data_all$a > data_all$n, 0, 1)
sum(d)
data
data_all
d
data_all <- NULL
set.seed(1234)
for (i in 1:10000) {
a <- 1
b <- runif(20, 0, 1)
c <- as.tibble(b)
d <- count(filter(c, value <.055))
data <- cbind(a, d)
data_all <- rbind(data, data_all)
}
d
data
data_all
?runif
b
data_all
c <- ifelse(data_all$a > data_all$n, 1, 0)
d <- ifelse(data_all$a > data_all$n, 0, 1)
sum(c)
sum(d)
?rnorm
?runif
runif(!0)
runif(10)
sum(runif(1,0,1) >= cumsum(wdOff))
sum(runif(1,0,1) >= cumsum())
sum(runif(1,0,1)
)
sample(c(1, 2, 3), size = 100, replace = TRUE, prob = c(0.5, 0.1, 0.4))
sample(c(1, 0), size = 100, replace = TRUE, prob = c(0.055))
sample(c(1, 0), size = 100, replace = TRUE, prob = c(0.055, 1-.055))
a <- rep(1, 10000)
a
set.seed(1234)
z <- sample(c(1, 0), size = 10000, replace = TRUE, prob = c(0.055, 1-.055))
a <- rep(1, 10000)
data <- cbind(a, z)
c <- ifelse(data_all$a > data_all$z, 1, 0)
d <- ifelse(data_all$a > data_all$z, 0, 1)
sum(c)
sum(d)
data
data <- as.tibble(a, z)
data <- as.tibble(cbind(a, z))
data
c <- ifelse(data_all$a > data_all$z, 1, 0)
d <- ifelse(data_all$a > data_all$z, 0, 1)
sum(c)
sum(d)
data_all <- as.tibble(cbind(a, z))
c <- ifelse(data_all$a > data_all$z, 1, 0)
d <- ifelse(data_all$a > data_all$z, 0, 1)
sum(c)
sum(d)
?sample
set.seed(1234)
z <- sample(c(1, 0), size = 10000, replace = FALSE, prob = c(0.055, 1-.055))
z
z <- sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
z
z <- sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
z
data <- NULL
for (i in 1:10000) {
set.seed(1234)
for (i in 1:10000) {
set.seed(1234)
z <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- z }
data
for (i in 1:10000) {
set.seed(1234)
z <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, z)}
data
z <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
z
data <- NULL
for (i in 1:10000) {
set.seed(1234)
z <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, z)}
data
data <- NULL
for (i in 1:10000) {
set.seed(1234)
z <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- cbind(data, z)}
data
data <- NULL
for (i in 1:10000) {
set.seed(1234)
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
data
score
data <- NULL
set.seed(1234)
for (i in 1:10000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
data
a <- rep(1, 10000)
data_all <- as.tibble(cbind(a, data))
data_all
c <- ifelse(data_all$a > data_all$z, 1, 0)
d <- ifelse(data_all$a > data_all$z, 0, 1)
sum(c)
sum(d)
c <- ifelse(data_all$a > data_all$score, 1, 0)
d <- ifelse(data_all$a > data_all$score, 0, 1)
sum(c)
sum(d)
data_all
c <- ifelse(data_all$a > data_all$data, 1, 0)
d <- ifelse(data_all$a > data_all$data, 0, 1)
sum(c)
sum(d)
data <- NULL
set.seed(1234)
for (i in 1:10000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
a <- rep(1, 10000)
data_all <- as.tibble(cbind(a, data))
c <- ifelse(data_all$a > data_all$data, 1, 0)
d <- ifelse(data_all$a > data_all$data, 0, 1)
sum(c)
sum(d)
data
data-all
data_all
c
c
d
1-.055
score
sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data_all
filter(data_all a > data)
filter(data_all, a > data)
filter(data_all, a < data)
nrow(filter(data_all, a > data))
nrow(filter(data_all, a < data))
data <- NULL
set.seed(1234)
for (i in 1:100000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
a <- rep(1, 100000)
data_all <- as.tibble(cbind(a, data))
nrow(filter(data_all, a > data))
nrow(filter(data_all, a < data))
data <- NULL
set.seed(1337)
for (i in 1:100000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
a <- rep(1, 100000)
data_all <- as.tibble(cbind(a, data))
nrow(filter(data_all, a > data))
nrow(filter(data_all, a < data))
results <- matrix(nrow=10000000, ncol=3, 1)
colnames(results) <- c("20 shots", "1 goal", "winner")
set.seed (1337)
for (i in 1:10000000) {
temp <- rbinom(20, 1, .055)
results[i,1] <- sum(temp)
}
results[,3] <- results[,1] - results[,2]
max(results[,3]) # 8
results
?rbinom
rbinom(20, 1, .055)
rbinom(20, 1, .055)
rbinom(20, 1, .055)
rbinom(20, 1, .055)
nrow(filter(data_all, a > data))
nrow(filter(data_all, a < data))
data <- NULL
set.seed(1234)
for (i in 1:100000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
a <- rep(1, 100000)
data_all <- as.tibble(cbind(a, data))
nrow(filter(data_all, a > data))
nrow(filter(data_all, a < data))
# imagine a hockey game where we know that Team A scores exactly 1 goal for sure
# and Team B takes 20 shots, each with a 5.5% chance of going in.
# which team would you rather be?
#  (nothing additional happens if you tie.)
data <- NULL
set.seed(1337)
for (i in 1:100000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
data <- c(data, score)}
# imagine a hockey game where we know that Team A scores exactly 1 goal for sure
# and Team B takes 20 shots, each with a 5.5% chance of going in.
# which team would you rather be?
#  (nothing additional happens if you tie.)
team_b_goals <- NULL
set.seed(1337)
for (i in 1:100000) {
score <- sum(sample(c(1, 0), size = 20, replace = TRUE, prob = c(0.055, 1-.055)))
team_b_goals <- c(team_b_goals, score)}
team_a_goals <- rep(1, 100000)
all_games <- as.tibble(cbind(team_a_goals, team_b_goals))
# Team A wins 32022
nrow(filter(all_games, team_a_goals > team_b_goals))
# Teams B wins 30337
nrow(filter(all_games, team_a_goals < team_B_goals))
# Team A wins 32022
nrow(filter(all_games, team_a_goals > team_b_goals))
# Teams B wins 30337
nrow(filter(all_games, team_a_goals < team_b_goals))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Hmisc)
library(lme4)
library(lmerTest)
library(emmeans)
data <- read_csv("data1.csv")
data$Subject <- as.factor(data$Subject)
data$Item <- as.factor(data$Item)
data$Condition <- as.factor(data$Condition)
data %>%
ggplot(aes(x = Condition, y = RT, colour = Condition)) +
geom_violin() +
geom_jitter(alpha = .2, width = .2) +
guides(colour = FALSE) +
geom_boxplot(width = .2, colour = "black", alpha = 0) +
coord_flip()
data
unique(data$Item)
unique(data$Subject)
data <- read_csv("data2.csv")
unique(data$Item)
length(unique(data$Item))
data$Subject <- as.factor(data$Subject)
data$Item <- as.factor(data$Item)
data$Prime <- as.factor(data$Prime)
data$Target <- as.factor(data$Target)
contrasts(data$Prime) <- matrix(c(.5, -.5))
contrasts(data$Target) <- matrix(c(.5, -.5))
model1 <- lmer(Time ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime * Target | Item), data = data, REML = TRUE)
summary(model1)
emmeans(model1, pairwise ~ Prime*Target, adjust = "none")
model7 <- lmer(log(Time) ~ Prime * Target + (1 + Prime * Target | Subject) + (1 + Prime * Target | Item), data = data, REML = TRUE)
summary(model7)
emmeans(model7, pairwise ~ Prime*Target, adjust = "none", type = "response")
?stat
sw
library(tidyverse)
sw
install.packages("sandwich")
install.packages("sandwich")
library(sandwich)
sw
