panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
lb <- function(x) mean(x) - sd(x)
ub <- function(x) mean(x) + sd(x)
dataRT <- df
sumld <- ddply(dataRT, ~Condition, summarise, mean = mean(Score), median = median(Score), lower = lb(Score), upper = ub(Score))
# Animated raincloud plots ####
library(plyr)
df <- NULL
set.seed(1111)
sample_size = 500  # Change sample size here to 20 or 500
for (i in 1:9) {
a <- rnorm(sample_size, mean = 10, sd = 2)
b <- rnorm(sample_size, mean = 10, sd = 2)
a <- cbind(a, rep ("A", sample_size), rep (i, sample_size))
b <- cbind(b, rep("B", sample_size), rep (i, sample_size))
df <- rbind(df, (rbind(a, b)))
}
df <- as.tibble(df)
colnames(df) <- c("Score","Condition", "Sample")
df$Score <- as.numeric(df$Score)
raincloud_theme = theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.title=element_text(size=12),
legend.text=element_text(size=12),
legend.position = "right",
plot.title = element_text(lineheight=.8, face="bold", size = 16),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
lb <- function(x) mean(x) - sd(x)
ub <- function(x) mean(x) + sd(x)
dataRT <- df
sumld <- ddply(dataRT, ~Condition, summarise, mean = mean(Score), median = median(Score), lower = lb(Score), upper = ub(Score))
ggplot(data = dataRT, aes(y = Score, x = Condition, fill = Condition)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8, trim=FALSE) +
geom_point(aes(y = Score, color = Condition), position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1,  outlier.shape = NA, alpha = 0.5) +
transition_states(Sample, transition_length = 4, state_length = 8) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_color_brewer(palette = "Accent") +
scale_fill_brewer(palette = "Accent") +
coord_flip() +
theme_bw() +
raincloud_theme +
labs (x = "Condition", y = "DV", title = paste0("Sample number {closest_state}
Sample size = ", sample_size))
library(MASS) # Needed to sample from multivariate distribution
# Simulating multivariate data with specific covariance structure
# Use the mvrnorm() function from the MASS package
# A vector of means of our two variables
mu <- c(1000, 2000)
# Covariance of our 2 variables
# It is equal to Pearson's R * SD_var1 * SD_var2
# If we know the variance for each of our variables we can calculate the sd
# We can then use these values to work out the covariance we need for any
# particular Pearson's r value
# For the below example to give us a Pearson's r of .5
# we have covariance = .5 * sqrt(100) * sqrt(50) which gives us 35.35534
myr <- 35.35534
# The covariance matrix where we have the variance of variable 1,
# the covariance of variables 1 and 2
# the covariance of variables 1 and 2 and the variance of variable 2
mysigma <- matrix(c(100, myr, myr, 50), 2, 2)
# Animating sampling many times and illustrating varation in our regression line (and our correlation
# calculation) due to sampling error.
data <- NULL
sample_size <- 500
set.seed(3)
for (i in 2:9) {
sample <- data.frame(mvrnorm(sample_size, mu, mysigma))
sample$sample <- i
data <- rbind(sample, data)
}
results <- NULL
for (i in 2:9) {
temp <- filter(data, sample == i)
results <- rbind(tidy(rcorr(temp$X1, temp$X2)), results)
}
results
# Now set the first sample so the correlation is identical to the correlation in the multivariate
# population we're sampling from
# Need to reset empirical to TRUE for this to work
sample <- data.frame(mvrnorm(sample_size, mu, mysigma, empirical = TRUE))
sample$sample <- 1
data <- rbind(sample, data)
colnames(data) <- c("Var_1", "Var_2", "Sample")
results <- NULL
for (i in 1:9) {
temp <- filter(data, Sample == i)
results <- rbind(cbind(i, tidy(rcorr(temp$Var_1, temp$Var_2))), results)
}
colnames(results)[1] <- "Sample"
data <- full_join(data, results, by = "Sample")
ggplot(data, aes(x = Var_1, y = Var_2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
transition_states(Sample, transition_length = 1, state_length = 2) +
labs(x = "Variable 1", y = "Variable 2",
title = "9 samples where each sample size = {sample_size}
Sample number: {closest_state}") +
theme(title = element_text(size = 15)) +
ease_aes("linear")
library(tidyverse)
# A vector of means of our two variables
mu <- c(1000, 2000)
# Covariance of our 2 variables
# It is equal to Pearson's R * SD_var1 * SD_var2
# If we know the variance for each of our variables we can calculate the sd
# We can then use these values to work out the covariance we need for any
# particular Pearson's r value
# For the below example to give us a Pearson's r of .5
# we have covariance = .5 * sqrt(100) * sqrt(50) which gives us 35.35534
myr <- 35.35534
# The covariance matrix where we have the variance of variable 1,
# the covariance of variables 1 and 2
# the covariance of variables 1 and 2 and the variance of variable 2
mysigma <- matrix(c(100, myr, myr, 50), 2, 2)
data <- NULL
sample_size <- 500
set.seed(3)
for (i in 2:9) {
sample <- data.frame(mvrnorm(sample_size, mu, mysigma))
sample$sample <- i
data <- rbind(sample, data)
}
results <- NULL
for (i in 2:9) {
temp <- filter(data, sample == i)
results <- rbind(tidy(rcorr(temp$X1, temp$X2)), results)
}
library(broom)
# A vector of means of our two variables
mu <- c(1000, 2000)
# Covariance of our 2 variables
# It is equal to Pearson's R * SD_var1 * SD_var2
# If we know the variance for each of our variables we can calculate the sd
# We can then use these values to work out the covariance we need for any
# particular Pearson's r value
# For the below example to give us a Pearson's r of .5
# we have covariance = .5 * sqrt(100) * sqrt(50) which gives us 35.35534
myr <- 35.35534
# The covariance matrix where we have the variance of variable 1,
# the covariance of variables 1 and 2
# the covariance of variables 1 and 2 and the variance of variable 2
mysigma <- matrix(c(100, myr, myr, 50), 2, 2)
data <- NULL
sample_size <- 500
set.seed(3)
for (i in 2:9) {
sample <- data.frame(mvrnorm(sample_size, mu, mysigma))
sample$sample <- i
data <- rbind(sample, data)
}
results <- NULL
for (i in 2:9) {
temp <- filter(data, sample == i)
results <- rbind(tidy(rcorr(temp$X1, temp$X2)), results)
}
results
# Now set the first sample so the correlation is identical to the correlation in the multivariate
# population we're sampling from
# Need to reset empirical to TRUE for this to work
sample <- data.frame(mvrnorm(sample_size, mu, mysigma, empirical = TRUE))
sample$sample <- 1
data <- rbind(sample, data)
colnames(data) <- c("Var_1", "Var_2", "Sample")
ggplot(data, aes(x = Var_1, y = Var_2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
transition_states(Sample, transition_length = 1, state_length = 2) +
labs(x = "Variable 1", y = "Variable 2",
title = "9 samples where each sample size = {sample_size}
Sample number: {closest_state}") +
theme(title = element_text(size = 15)) +
ease_aes("linear")
unique(data$estimate)
data <- NULL
sample_size <- 500
set.seed(3)
for (i in 2:9) {
sample <- data.frame(mvrnorm(sample_size, mu, mysigma))
sample$sample <- i
data <- rbind(sample, data)
}
# Now set the first sample so the correlation is identical to the correlation in the multivariate
# population we're sampling from
# Need to reset empirical to TRUE for this to work
sample <- data.frame(mvrnorm(sample_size, mu, mysigma, empirical = TRUE))
sample$sample <- 1
data <- rbind(sample, data)
colnames(data) <- c("Var_1", "Var_2", "Sample")
ggplot(data, aes(x = Var_1, y = Var_2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
transition_states(Sample, transition_length = 1, state_length = 2) +
labs(x = "Variable 1", y = "Variable 2",
title = "9 samples where each sample size = {sample_size}
Sample number: {closest_state}") +
theme(title = element_text(size = 15)) +
ease_aes("linear")
set.seed(1234)
max_sample_size <- 100
data <- NULL
for (i in 2:max_sample_size){
sample <- cbind(rnorm(i, 1000, 50), i)
data <- rbind(data, sample)
}
data <- as.tibble(data)
colnames(data) <- c("measure", "sample_size")
all <- NULL
for (i in 2:max_sample_size){
each <- cbind(mean_cl_boot(filter(data, sample_size == i)$measure), i)
all <- rbind(all, each)
}
colnames(all) <- c("mean", "ymin", "ymax", "sample_size")
p1 <- ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
shadow_mark(size = 3, colour = "grey")
animate(p1, fps = 10, renderer = gifski_renderer(loop = TRUE))
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
shadow_mark(size = 2, colour = "grey")
set.seed(1234)
max_sample_size <- 100
data <- NULL
for (i in 2:max_sample_size){
sample <- cbind(rnorm(i, 1000, 50), i)
data <- rbind(data, sample)
}
data <- as.tibble(data)
colnames(data) <- c("measure", "sample_size")
data
all <- NULL
for (i in 2:max_sample_size){
each <- cbind(mean_cl_boot(filter(data, sample_size == i)$measure), i)
all <- rbind(all, each)
}
all
colnames(all) <- c("mean", "ymin", "ymax", "sample_size")
colnames(all) <- c("mean", "ymin", "ymax", "sample_size")
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
shadow_mark(size = 3, colour = "grey")
all$sample_size
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15))
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size)
?transition_states
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_states(sample_size, transition_length = 1, state_length = 2)
set.seed(1234)
max_sample_size <- 100
data <- NULL
for (i in 1:max_sample_size){
sample <- cbind(rnorm(i, 1000, 50), i)
data <- rbind(data, sample)
}
data <- as.tibble(data)
colnames(data) <- c("measure", "sample_size")
all <- NULL
for (i in 1:max_sample_size){
each <- cbind(mean_cl_boot(filter(data, sample_size == i)$measure), i)
all <- rbind(all, each)
}
colnames(all) <- c("mean", "ymin", "ymax", "sample_size")
p1 <- ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_states(sample_size, transition_length = 1, state_length = 2) +
shadow_mark(size = 3, colour = "grey")
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_states(sample_size, transition_length = 1, state_length = 2) +
shadow_mark(size = 3, colour = "grey")
all
is.na(all$ymin)
is.na(all$ymin) <- 0
is.na(all$ymax) <- 0
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_states(sample_size, transition_length = 1, state_length = 2) +
shadow_mark(size = 3, colour = "grey")
all
all[is.na(all$ymin)]$ymin <- 0
all$ymin[is.na(all$ymin)]
all$ymin[is.na(all$ymin)]
all$ymin[is.na(all$ymin)] <- 0
all$ymax[is.na(all$ymax)] <- 0
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_states(sample_size, transition_length = 1, state_length = 2) +
shadow_mark(size = 3, colour = "grey")
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size)
str(all)
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
#geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size)
library(tidyverse)
library(gganimate)
set.seed(1234)
max_sample_size <- 100
data <- NULL
for (i in 1:max_sample_size){
sample <- cbind(rnorm(i, 1000, 50), i)
data <- rbind(data, sample)
}
data <- as.tibble(data)
colnames(data) <- c("measure", "sample_size")
all <- NULL
for (i in 1:max_sample_size){
each <- cbind(mean_cl_boot(filter(data, sample_size == i)$measure), i)
all <- rbind(all, each)
}
colnames(all) <- c("mean", "ymin", "ymax", "sample_size")
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour="red") +
#geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
shadow_mark(size = 3, colour = "grey")
all$sample <- all$sample_size
ggplot(all, aes(x = sample, y = mean)) +
geom_point(colour="red") +
#geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(880,1120) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
shadow_mark(size = 3, colour = "grey")
library(tidyverse)
# Sample size and estimate variability around the mean ####
set.seed(1234)
max_sample_size <- 2500
data <- NULL
for (i in 2:max_sample_size){
sample <- cbind(rnorm(i, 1000, 50), i)
data <- rbind(data, sample)
}
data <- as.tibble(data)
colnames(data) <- c("measure", "sample_size")
all <- NULL
for (i in 2:max_sample_size){
each <- cbind(mean_cl_boot(filter(data, sample_size == i)$measure), i)
all <- rbind(all, each)
}
colnames(all) <- c("mean", "ymin", "ymax", "sample_size")
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour = "red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(925, 1075) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
#shadow_mark(size = 4, colour = "grey") +
shadow_trail(distance = .025)
library(gganimate)
ggplot(all, aes(x = sample_size, y = mean)) +
geom_point(colour = "red") +
geom_errorbar(aes(ymin = ymin, ymax = ymax)) +
geom_hline(yintercept = 1000, colour = "blue") +
ylim(925, 1075) +
labs(x = "Sample Size", y = "Estimate of Mean") +
theme_minimal() +
theme(text = element_text(size = 15)) +
transition_time(sample_size) +
#shadow_mark(size = 4, colour = "grey") +
shadow_trail(distance = .025)
library(visdat)
# Load the libraries we will be using ####
library(tidyverse)
library(psych)
library(NHANES)
vis_miss(NHANES)
NHANES_tidied <- NHANES %>% distinct(ID, .keep_all = TRUE)
vis_miss(NHANES_tidied)
NHANES_focused <- select(NHANES_tidied, ID, Gender, SleepHrsNight,
AlcoholDay, Marijuana, BMI)
vis_miss(NHANES_focused)
vis_dat(NHANES_focused)
?inner_join
?tidyr
?mutate
?tidyr
?spread
?gather
install.packages(c("animation", "backports", "bookdown", "broom", "callr", "classInt", "ddalpha", "effects", "emmeans", "gamlss.dist", "generics", "ggimage", "ggstatsplot", "httr", "hunspell", "jmv", "jmvcore", "jsonlite", "knitr", "lava", "markdown", "olsrr", "pillar", "prediction", "processx", "quantreg", "RcppEigen", "readr", "rio", "rmarkdown", "rvcheck", "sfsmisc", "spData", "StanHeaders", "survey", "survival", "transformr", "tweenr", "units", "visdat"))
# Load the libraries we will be using ####
library(tidyverse)
library(psych)
library(NHANES)
library(viridisLite)
library(ggrepel)
library(visdat)
# Data Wrangling ####
# Create data for 10,000 people - each with measures of Working Memory (WM),
# IQ, and Reading Comprehension (Comp)
set.seed(1234)
ID <- seq(1:10000)
WM <- as.integer(rnorm(10000, mean = 50, sd = 5))
IQ <- as.integer(rnorm(10000, mean = 100, sd = 15))
Comp <- as.integer(rnorm(10000, mean = 20, sd = 2))
data <- data.frame(ID, WM, IQ, Comp)
colnames(data) = c("ID", "WM", "IQ", "Comp")
# Create data for 48 participants (all present in data) taking part in an
# experiment
set.seed(1234)
ID <- sample(ID, 48)
Simple <- as.integer(rnorm(48, mean = 2000, sd = 140))
Complex <- as.integer(rnorm(48, mean = 2400, sd = 160))
dataRT <- data.frame(ID, Simple, Complex)
colnames(dataRT) = c("ID", "Simple_sentence", "Complex_sentence")
dataRT_all <- inner_join(data, dataRT, by = (c("ID")))
data_transformed <- mutate(dataRT_all,
log_Simple = log(Simple_sentence),
log_Complex = log(Complex_sentence))
